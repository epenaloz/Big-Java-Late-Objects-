package chapter6_arrays;

/*
 * Programmer:  Enrique Penaloza

P6.2:   Write array methods that carry out the following tasks for an array
of integers. For each method, provide a test program
    a. Swap the first and last elements in the array.
    b. Shift all elements by one to the right and move the last element into
the first position.
    c. Replace all even elements with 0.
    d. Replace each element except the first and last by the larger of its
two neighbors
    e. Remove the middle element if the array lengthis odd, or the middle two
elements if the length is even.
    f. Move all even elements to the front, otherwise preserving the order
of the elements.
    g. Return the second-largest element in the array.
    h. Return true if the array is currenlty sorted in increasing order.
    i. Return true if the array contains two adjacent duplicate elements.
    j. Return true if the array contains duplicate elements (which need not
be adjacent).
 */

import java.util.Scanner;

public class P6_2 {
    
    public static void main(String[] args)
    {
        Scanner in = new Scanner(System.in);
        int[] array = new int[10];
        for(int i=0; i < array.length; i++)
        {
            System.out.printf("%d element of array: ", i);
            array[i] = in.nextInt();
        }
        in.close();
        
        swapFirstAndLast(array);
        shiftAllElements(array);
        replaceEventoZero(array);
        replaceAllButFirstLast(array);
        removeMiddleElement(array);
        moveEvenFront(array);
        secondLargest(array);
        orderIncrease(array);
        adjacentDuplicates(array);
        containsDuplicates(array);
    }
    
    //A
    public static void swapFirstAndLast(int[] array)
    {
        //Establish a temp to swap the elements
        int tempVariable = array[array.length-1];
        array[array.length-1] = array[0];
        array[0] = tempVariable;
        
        System.out.println("The new array is ");
        for(int i=0; i < array.length; i++)
        {
            System.out.print(array[i] + " ");
        }
    }
    
    //B
    public static void shiftAllElements(int[] array)
    {
        //Establish a temp variable for the last element.
        int temp = array[array.length-1];
        
        System.out.println("The array when shifted is now: ");
        for(int i=array.length-1; i>=0; i++)
        {
            array[i] = array[i-1];
            if(i == 0)
            {
                array[0] = temp;
            }
            System.out.print(array[i] + " ");
        }
        
        System.out.println();
    }
    
    //C
    public static void replaceEventoZero(int[] array)
    {
        System.out.println("This array is to replace all elements to zero");
        
        for(int i=0; i < array.length; i++)
        {
            if(array[i] % 2 == 0)
            {
                array[i] = 0;
            }
            System.out.print(array[i] + " ");
        }
        
        System.out.println();
    }
    
    //D
    public static void replaceAllButFirstLast(int[] array)
    {
        System.out.println("This array does not swap the first and last"
                + " element");
        for(int i=0; i < array.length; i++)
        {
            if(i != 0 || i != array.length)
            {
                if(array[i-1] < array[i+1])
                {
                    array[i-1] = array[i+1];
                }
            }
            System.out.print(array[i] + " ");
        }
    }
    
    //E
    //Remove the middle element if the array length is odd, or 
    //the middle two elements if the length is even.
    public static int[] removeMiddleElement(int[] array)
    {
        //a placeholder for the middle compartment
        int firstMiddleIndex = (array.length/2)-1;
        
        if(array.length %2==0)
        {
            int[] newArray = new int[array.length-2];
            for(int i=0; i< firstMiddleIndex; i++)
            {
                newArray[i]= array[i];
            }
            for(int i = firstMiddleIndex+1; i< newArray.length; i++)
            {
                newArray[i] = array[i+1];
            }
            return newArray;
        }
        else
        {
            int[] newArray = new int[array.length-1];
            for(int i=0; i<= firstMiddleIndex; i++)
            {
                newArray[i] = array[i];
            }
            for(int i= firstMiddleIndex+1; i< newArray.length; i++)
            {
                newArray[i] = array[i+1];
            }
            return newArray;
        }
    }
    //f. Move all even elements to the front, otherwise preserving the order
    //  of the elements.
    public static void moveEvenFront(int[] array)
    {
        //We are going to tranverse through the array and add       
        int lastEvenElementIndex = 0;
        for(int i=0; i< array.length; i++)
        {
            if(array[i] % 2 ==0)
            {
                //placeholder for the even current
                int holdForFront= array[i];
                //move the odd number and move it where the even element was at
                array[i] = array[lastEvenElementIndex];
                //place the even number to where the odd number 
                //was at (in front)
                 array[lastEvenElementIndex] = array[i];
                 //increment the front index.
                 lastEvenElementIndex++;
            }
        }
    }

    //g. Return the second-largest element in the array.
    public static int secondLargest(int[] array)
    {
        int largest = array[0];
        int secondLargest = array[0];
            
        for(int i=1; i< array.length; i++)
        {
            //if the firstLargest is bigger than currentIndex
            if(array[i] > largest)
            {
                /*the largest is secondbiggest and largest is current element
                until otherwise */
                secondLargest = largest;
                largest = array[i];
            }
        }
        return secondLargest;
    }  

    //h. Return true if the array is currenlty sorted in increasing order.
    public static boolean orderIncrease(int[] array)
    {
        /*traverse the array and determin if the front number is bigger than
        the current number */
        for(int i=1; i < array.length; i++)
        {
            if(array[i-1] > array[i])
            {
                return false;
            }
        }
        return true;
    }
    
    //i. Return true if the array contains two adjacent duplicate elements.
    public static boolean adjacentDuplicates(int[] array)
    {
        /*traverse the array and determine if the front number is same than
        the current number */
        for(int i=0; i < array.length; i++)
        {
            if(array[i] == array[i+1]);
            return true;
        }
        return false;
    }    
    
    /*j. Return true if the array contains duplicate elements (which need not
    be adjacent).*/
    public static boolean containsDuplicates(int[] array)
    {
        /*traverse the array and determine if the front number is same than
        the current number */
        for(int i=0; i < array.length; i++)
        {
            for(int j=0; j< array.length; j++)
            {
                if(i != j && array[i] == array[j])
                {
                    return true;
                }
            }
        }
        return false;
    }
}

